# Typeข้อมูลแบบAlgebraicอย่างง่าย (Simple Algebraic Data Types) (Draft)

เราได้เห็นสองวิธีพื้นฐานในการรวมtypeเข้าด้วยกันที่ก็คือโดยการใช้productและcoproduct
มันกลับเป็นว่าdata
structureหลายๆตัวที่ถูกใช้ในการเขียนโปรแกรมในทุกๆวันสามารถถูกสร้างขึ้นมาจากกลไกทั้งสองนี้
ความจริงข้อนี้มีผลที่ตามมาในทางการปฏิบัติที่สำคัญเป็นอย่างมาก
หลายคุณสมบัติของdata structureสามารถประกอบกันได้
ตัวอย่างเช่นถ้าคุณรู้วิธีการที่จะเปรียบเทียบความเท่ากันของค่าของtypeพื้นฐานและคุณรู้วิธีการที่จะการgeneralizeการเปรียบเทียบเหล่านี้ไปยังtypeของproductและcoproduct
คุณก็สามารถที่จะทำให้การสร้าง(derive)วิธีการในการเปรียบเทียบความเท่ากันสำหรับtypeผสมเป็นไปโดยอัตโนมัติได้
ในHaskellคุณสามารถที่จะสร้างการเท่ากัน การเปรียบเทียบ การแปลง
ไปยังและจากstringและอื่นๆสำหรับtypeผสมอย่างมากมาย

เรามาดูให้ละเอียดมากขึ้นกับproductและtypeประเภทsumในตอนที่มันปรากฏขึ้นมาในการเขียนโปรแกรม

## TypeแบบProducts

ในการเขียนแบบมาตราฐานของproductระหว่างสองtypeในภาษาโปรแกรมมิ่งคือpair  ในHaskell
pairเป็นconstructorของtypeที่เป็นprimitive
ในC++มันคือtemplateที่ถูกนิยามในlibaryมาตราฐานที่ค่อนข้างที่จะชับช้อนเมื่อเทียบกับสิ่งอื่น

![](images/pair.jpg){fig-align="center" height=200}

จริงๆแล้วPairนั้นไม่สามาถสลับที่ได้ โดยตัวอย่างเช่น pairของ`(Int,
Bool)`ไม่สามารถที่จะแทนที่pairของ`(Bool,
Int)`ถึงแม้พวกมันจะถือข้อมูลชุดเดียวกันแต่พวกมันสามาถสลับที่ได้แค่จนถึงความisomorphism
isomorphismถูกให้โดยfunction`swap`ที่ก็เป็นinverseของมันเอง

```Haskell
swap :: (a, b) -> (b, a)
swap (x, y) = (y, x)
```

คุณสามารถที่จะคิดถึงกับpairสองตัวในแบบที่ทั้งสองอย่างโดยการใช้รูปแบบที่แตกต่างกันออกไปในการเก็บข้อมูลเดียวกัน
ก็เหมือนกันกับbig endianและlittle endian

คุณสามารถที่จะผสมtypeต่างๆกันเท่าไหร่ก็ได้เพื่อที่จะได้เป็นproductของpairต่างๆที่อยู่ข้างในpairอีกที
(และไปเรื่อยๆ) แต่ก็มีวิธีที่ง่ายกว่าpairในpair(nested pair)นั้นเท่ากับtuple
มันเป็นผลเนื่องมาจากความจริงที่ว่า
หลากหลายวิธีในการนำpairเข้าไปในpairนั้นisomorphicกัน
ถ้าคุณต้องการที่จะรวมtypeสามอย่างในproduct`a`,`b`และ`c`
ในลำดับนี้คุณสามารถที่จะทำมันในสองรูปแบบ 

```Haskell
((a, b), c)
```

หรือ

```Haskell
(a, (b, c))
```

typeเหล่านี้นั้นแตกต่างกัน (คุณไม่สามารถที่จะนำเข้าสู่functionที่หวังแบบหนึ่ง)
แต่สมาชิกของพวกมันนั้นมีความตรงกันในแบบหนึ่งต่อหนึ่ง
ได้มีfunctionที่โยงตัวหนึ่งไปยังอีกตัว

```Haskell
alpha :: ((a, b), c) -> (a, (b, c))
alpha ((x, y), z) = (x, (y, z))
```

และfunctionนี้สามารถถูกinverseได้

```Haskell
alpha_inv :: (a, (b, c)) -> ((a, b), c)
alpha_inv (x, (y, z)) = ((x, y), z)
```

ดังนั้นมันคือisomorphism
แบบนี้ก็คือวิธีที่แตกต่างกันในการบรรจุใหม่ข้อมูลที่เหมือนกัน

คุณสามารถที่จะตีความการสร้างtypeแบบproductในฐานะoperator binaryลงในtypeต่างๆ
จากมุมมองนี้isomorphismข้างบนดูเหมือนกฏการเปลี่ยนหมู่ที่เราเห็นในmonoid

$$(a * b) * c = a * (b * c)$$

ยกเว้นว่าในตัวอย่างของmonoid
วิธีการประกอบกันของproductทั้งสองแบบนั้นเท่ากันในขณะที่ในที่นี่มันแค่เท่ากันจนถึงความisomorphism 

ถ้าเราสามารถที่จะอยู่กับisomorphismต่างๆได้และไม่ยืนยันในความเท่ากับแบบเคร่งครัด
เราสามารถที่จะไปไกลออกไปมากกว่านี้และสามารถแสดงให้เห็นว่าtypeแบบunit`()`คือunitของproductในแบบเดียวกันกับวิธีการที่$1$คือunitของการคูณ
แน่นอนว่าการpairกันระหว่างค่าของtype`a`บางอย่างกับunitไม่ได้เพิ่มข้อมูลเข้ามา
typeอย่างที่

```Haskell
(a, ())
```

นั้นisomorphicกับ`a`และนี่คือisomorphismระหว่างกัน

```Haskell
rho :: (a, ()) -> a
rho (x, ()) = x
```

```Haskell
rho_inv :: a -> (a, ())
rho_inv x = (x, ())
```

ข้อสังเกตเหล่านี้สามารถถูกทำให้เป็นทางการโดยการบอกว่า$\textbf{Set}$(categoryของset)นั้นเป็นcategoryแบบmonoidal
มันคือcategroyที่ก็เป็นmonoidในความหมายเดียวกันกับการที่คุณสามารถหลายวัตถุต่างๆกัน
(ในที่นี้คือการนำproduct  cartesianมาใช้) ผมจะพูดเกี่ยวกับ*category
monoidal*มากขึ้นและให้นิยามที่สมบูรณ์ในอนาคต 

ได้มีวิธีในการนิยามtypeแบบproductที่ทั่วไปมากกว่านี้ในHaskell
โดยเฉพาะ(ในการที่เราจะได้เห็นเร็วๆนี้)ในตอนที่มีการรวมมันเข้ากับtypeประเภทsum
มันได้ใช้constructorที่มีชื่อ(named constructors)ที่มีargumentหลายตัว
ตัวอย่างเช่นpairที่สามารถที่จะถูกนิยามในอีกแบบหนึ่งว่า

```Haskell
data Pair a b = P a b
```

ในที่นี้`Pair a b`คือชื่อของtypeที่มีparameterเป็นtypeอีกสองประเภท`a`และ`b`
และ`P`คือชื่อของconstructorของข้อมูล
คุณนิยามtypeแบบpairโดยการนำสองtypeเข้าไปยัง`Pair`ที่เป็นconstructorของtype
คุณสร้างค่าของpairโดยการนำค่าทั้งสองค่าในtypeที่ถูกต้องเข้าไปยังconstructor`P`
ตัวอย่างเช่นเรามานิยามค่า`stmt`ในฐานะpairของ`String`และ`Bool`ว่า

```Haskell
stmt :: Pair String Bool
stmt = P "This statement is" False
```

ในบรรทัดแรกคือการประกาศtypeที่ใช้constructorของtype`Pair`กับ`String`และ`Bool`ที่แทนที่`a`และ`b`ในนิยาม
genericของ`Pair`
บรรทัดสองคือการนิยามค่าจริงๆโดยการนำstringจริงๆและBooleanจริงๆเข้าไปยังconstructorของข้อมูล`P`
constructorของtypeจะถูกใช้ในการสร้างtypeต่างๆและconstructorข้อมูลจะถูกใช้ในการสร้างค่าต่างๆ

เนื่องว่าname
spaceสำหรับconstructorของtypeและข้อมูลนั้นแยกกันในHaskellคุณจะเห็นในบ่อยครั้งว่าชื่อเดียวกันจะถูกใช้ในแบบนี้

```Haskell
data Pair a b = Pair a b
```

และถ้าคุณสังเกตมันให้ลึกขึ้นคุณก็อาจจะมองtype
pairแบบbuilt-inในฐานะอีกแบบหนึ่งของการประกาศในรูปแบบนี้ในที่ที่ชื่อ`Pair`ถูกแทนที่ด้วยopeartor
binary`(,)`
ที่จริงๆแล้วคุณสามารถที่จะใช้`(,)`เหมือนกันกับconstructorที่มีชื่อและสร้างpairผ่านสัญลักษณ์แบบprefixที่ว่า

```Haskell
stmt = (,) "This statement is" False
```

ในแบบคล้ายๆกันคุณก็สามารถที่จะใช้ `(,,)`ในการสร้างtupleและอื่นๆ

แทนที่จะใช้pair genericหรือtupleต่างๆ
คุณก็สามารถที่จะนิยามtypeแบบproductที่มีชื่อเฉพาะในแบบนี้

```Haskell
data Stmt = Stmt String Bool
```

ที่แค่คือproductระหว่าง`String`กับ`Bool`แต่มีชื่อและconstructorเป็นของตนเอง
ข้อดีของรูปแบบของการประกาศแบบนี้คือคุณสามารถที่จะนิยามหลายๆtypeที่มีข้อมูลเดียวกันแต่มีความหมายและการใช้งานที่แตกต่างออกไป
และที่ไม่สามารถแทนที่ระหว่างพวกมันได้

การเขียนโปรแกรมที่มีtupleและconstructorที่มีargumentหลายตัวก็สามารถที่จะก่อให้เกิดความยุ่งเหยิงและมีโอกาสที่จะเกิดปัญหา
ในการที่เราจะติดตามว่าของแต่ละส่วนประกอบเป็นตัวแทนของอะไร
มันมักจะดีกว่าที่จะให้ชื่อกับส่วนประกอบต่างๆ type
productที่มีข้อมูลที่มีชื่อ(named
field)ที่ถูกเรียกว่า*record*ในHaskellและ`struct`ใน`C`

## Records

เรามาลองดูในตัวอย่างง่ายๆ
เราต้องการที่จะอธิบายธาตุเคมีโดยการรวมสองstringเข้าด้วยกัน
ที่ก็คือชื่อกับเครื่องหมายและจำนวนเต็มซึ่งก็คือเลขอะตอมไปยังdata structureเดียว
เราสามารถที่จะใช้tuple`(String, String,
Int)`และจได้ำว่าแต่ละส่วนประกอบเป็นตัวแทนของอะไร
เราอาจจะดึงส่วนประกอบต่างๆโดยการการจับคู่รูปแบบโดยที่functionนี้ตรวจสอบว่าเครื่องหมายของธาตุนั้นเป็นprefixของชื่อของมัน
(ในแบบที่**He**เป็นprefixของ**Helium**)หรือไม่

```Haskell
startsWithSymbol :: (String, String, Int) -> Bool
startsWithSymbol (name, symbol, _) = isPrefixOf symbol name
```

โค้ดส่วนนี้นั้นมีความเป็นไปได้ที่มีปัญหาและยากที่จะอ่านและดูแลมัน มันนั้นง่ายกว่าที่จะนิยามเป็นrecord

```Haskell
data Element = Element { name :: String 
                       , symbol :: String 
                       , atomicNumber :: Int }
```

ในรูปแบบทั้งสองนั้นisomorphicกันโดยที่เห็นได้จากfunctionในการแปลงที่เป็นinverseระหว่างกัน

```Haskell
tupleToElem :: (String, String, Int) -> Element
tupleToElem (n, s, a) = Element { name = n 
                                , symbol = s 
                                , atomicNumber = a }
```

```Haskell
elemToTuple :: Element -> (String, String, Int)
elemToTuple e = (name e, symbol e, atomicNumber e)
```

สังเกตได้ว่าชื่อของข้อมูล(field)ในrecordก็สามารถถูกใช้ในฐานะfunctionในการเข้าถึงข้อมูลเหล่านี้
ตัวอย่างเช่น`atomicNumber e`สามารถดึงข้อมูล`atomicNumber`จาก`e`
เราได้ใช้`atomicNumber`ในฐานะfunctionของtype

```Haskell
atomicNumber :: Element -> Int
```

คู่กับไวยากรณ์ของrecordสำหรับ`Element`
function`startsWithSymbol`ของเราก็กลายมาเป็นสิ่งที่อ่านได้ง่ายขึ้น

```Haskell
startsWithSymbol :: Element -> Bool
startsWithSymbol e = isPrefixOf (symbol e) (name e)
```

เราก็อาจจะใช้เคล็ดลับของHaskellโดยการเปลี่ยนfunctionของ`isPrefixOf`ไปยังoperator
infixโดยการนำbackquotesมาครอบและทำให้มันอ่านคล้ายกับประโยค(ของมนุษย์)

```Haskell
startsWithSymbol e = symbol e `isPrefixOf` name e
```

วงเล็บสามารถที่จะถูกยกเว้นในตัวอย่างนี้เพราะว่าoperator
infixมีลำดับความสำคัญที่ต่ำกว่าการเรียกใช้function

## TypeแบบSum

เหมือนกับการที่productในcategoryของsetนั้นทำก่อให้เกิดtypes product
coproductก็จะทำให้เกิดtypeแบบsum
การเขียนที่เป็นมาตราฐานของtypeแบบsumในHaskellคือ

```Haskell
data Either a b = Left a | Right b
```

และก็เหมือนกับpair `Either`นั้นสามารถที่จะสลับที่ได้
(ได้จนถึงความisomorphism)ที่สามารถนำ`Either`มาใส่ใน`Either`ได้
และลำดับการใส่ก็ไม่มีความสำคัญ (จนถึงความisomorphism)
ดังนั้นในตัวอย่างเช่นเราสามารถที่จะนิยามsumที่เป็ยแบบtriple

```Haskell
data OneOfThree a b c = Sinistral a | Medial b | Dextral c
```

และอื่นๆ

มันกลายมาเป็นว่า$\textbf{Set}$นั้นก็เป็นcategoryแบบmonoidalที่มีสมมาตรของcoproduct
บทบาทของoperation binaryที่ถูกใช้โดยsum
disjointและบทบาทของสมาชิกunitถูกใช้โดยวัตถุเริ่มต้น
ในภาษาของtypeเรามี`Either`ในฐานะoperator
monoidalและ`Void`ที่ไม่มีอะไรอยู่เลยในฐานะสมาชิกnaturalของมัน
คุณสามารถที่จะคิดถึง`Either`ในฐานะการบวกและ`Void`ในฐานะเลขศูนย์
แน่นอนว่าการบวก`Void`ไปยังtypeแบบsumไม่ได้เปลี่ยนแปลงข้อมูลของมันโดยตัวอย่างเช่น

```Haskell
Either a Void
```

นั้นisomorphicกับ`a` นั่นก็เพราะว่าไม่มีวิธีการที่จะสร้างรูปแบบ`Right`ของtypeนี้
(ไม่มีค่าอยู่ในtypeของ`Void`)สิ่งที่อยู่ใน`Either a
Void`นั้นสร้างมาโดยใช้constructor`Left`และพวกมันเก็บค่าของtype`a`เอาไว้
ดังนั้นในทางสัญลักษณ์แล้วเราก็จะมี $a+0=a$

typeแบบsumนั้นถูกใช้ค่อนข้างที่จะทั่วไปในHaskellแต่สิ่งที่เหมือนกันในC++อย่างunionหรือvariantsนั้นพบได้น้อยกว่า
และเหตุผลสำหรับสิ่งนี้คือ

ในสิ่งแรก
typeแบบsumที่ง่ายที่สุดคือแค่enumerationและถูกเขียนโดยการใช้`enum`ในC++ที่เหมือนกับtypeแบบsumของHaskell

```Haskell
data Color = Red | Green | Blue
```

หรือในC++

```C++
enum { Red, Green, Blue };
```

และtypeแบบsumที่ง่ายกว่านี้คือ

```Haskell
data Bool = True | False
```

นั่นก็คือ`bool`ที่เป็นprimitiveในC++

typeแบบsumที่เรียบง่ายที่เก็บข้อมูลของการมีและไม่มีอยู่ของค่า
นั้นถูกเขียนได้ในหลายหลายรูปแบบในC++โดยการใช้เคล็ดลับพิเศษและค่าที่เป็น"ไปไม่ได้"อย่างstringว่าง
จำนวนลบ null pointersและอื่นๆ
การที่มีตัวเลือกแบบนี้(ถ้าต้องการแล้ว)สามารถถูกเขียนในHaskellโดยการใช้type`Maybe`

```Haskell
data Maybe a = Nothing | Just a
```

typeแบบ`Maybe`คือsumระหว่างtypeสองตัว
คุณสามารถที่จะเห็นสิ่งนี้wfhถ้าคุณแยกconstructorทั้งสองไปเป็นtypeเดี่ยวๆ
ตัวแรกอาจจะดูเหมือนดังนี้

```Haskell
data NothingType = Nothing
```

มันคือenumerationที่มีค่าค่าเดียวอย่าง`Nothing`ในอีกความหมายหนึ่งมันคือsetที่มีสมาชิกเพียงตัวเดียวที่เท่ากันกับtypeแบบunit`()`
ส่วนตัวที่สอง

```Haskell
data JustType a = Just a
```

คือการใส่type`a` เราอาจจะที่เก็บข้อมูลของ`Maybe`อย่าง

```Haskell
data Maybe a = Either () a
```

ในtypeแบบsumที่ชับช้อนกว่านี้มักจะถูกทำแบบปลอมโดยการใช้pointerของC++
pointerสามารถที่จะเป็นได้ทั้งnullหรือที่จะชี้ไปยังtypeบางประเภท
ตัวอย่างเช่นtypeแบบlistในHaskellสามารถที่จะถูกนิยามในแบบtypeแบบsum(ที่recursive)ว่า

```Haskell
data List a = Nil | Cons a (List a)
```

สามารถที่จะถูกแปลไปเป็นC++โดนการใช้เคล็ดลับของnull pointerในการเขียนlistว่าง

```C++
template<class A>
class List { 
    Node<A> * _head;
public:
    List() : _head(nullptr) {} // Nil
    List(A a, List<A> l)       // Cons
      : _head(new Node<A>(a, l))
    {}
};
```

สังเกตได้ว่าconstructorสองตัวของHaskellอย่าง`Nil`และ`Cons`สามารถที่จะถูกแปลไปยังcostructor`List`ที่ถูกoverloadedคู่กับargumentที่คล้ายๆกัน(ไม่มีค่าอยู่สำหรับ`Nil`และค่าและlistสำหรับ`Cons`)classของ`List`ไม่จำเป็นต้องมีชื่อเรียกเพื่อที่จะแยกระหว่างสองส่วนประกอบของtypeแบบsum
มันได้ใช้ค่า`nullptr`ที่พิเศษสำหรับ`_head`ในการเก็บข้อมูลแบบ`Nil`แทนที่

แต่ความแตกต่างที่สำคัญระหว่างtypeของHaskellและC++คือการที่data
structuresของHaskellนั้นไม่สามารถแก้ไขค่าได้(immutable)
ถ้าคุณสร้างวัตถุโดยการใช้constructorเฉพาะ
วัตถุนี้จะจำconstructorที่ถูกใช้และargumenที่นำเข้ามาไปโดยตลอด
ดังนั้นวัตถุแบบ`Maybe`ที่ถูกสร้างในฐานะ`Just
"energy"`จะไม่เปลี่ยนไปเป็น`Nothing`เลย
ในทางคล้ายๆกันที่listว่างจะว่างไปตลอดและlistที่มีสมาชิกสามตัวก็จะมีสมาชิกสามตัวเดิมไปตลอด

มันคือความที่ไม่สามารถแก้ไขค่าได้ที่ทำให้การสร้างย้อนกลับได้ ถ้ามีวัตถุ
คุณสามารถที่จะแยกส่วนประกอบมันลงมาจงถึงส่วนต่างๆที่ถูกใช้ในการสร้างมัน
การแยกชิ้นส่วนถูกทำผ่านการจับคู่รูปแบบและมันได้ใช้ซ้ำconstructorในฐานะรูปแบบargumentของconstructor(ถ้ามีอยู่)ก็จะถูกแทนที่ด้วยตัวแปร
(หรือรูปแบบอื่นๆ)

ประเภทข้อมูลของ`List`มีconstrunctorอยู่สองแบบ
ดังนั้นการแยกชิ้นส่วนของ`List`แบบใหนก็ตามจะใช้สองรูปแบบที่ตรงกันกับconstructทั้งสอง
ตัวหนึ่งคู่กับlist`Nil`และตัวอื่นๆคือlistที่สร้างจาก`Cons`
ตัวอย่างเช่นนี่คือนิยามของfunctionบน`List`แบบง่ายๆ

```Haskell
maybeTail :: List a -> Maybe (List a)
maybeTail Nil = Nothing
maybeTail (Cons _ t) = Just t
```

ในส่วนแรกของนิยาม`maybeTail`ได้ใช้constructor`Nil`ในฐานะรูปแบบและคือค่า`Nothing`
ในส่วนที่สองใช้constructor`Cons`ในฐานะรูปแบบ
มันแทนที่argumentของconstructorแรกด้วยตัวแทนเพราะว่าเราไม่ได้สนใจมัน
argumentที่สองที่ไปยัง`Cons`นั้นอยู่ภายใต้ตัวแปร`t`
(ผมจะเรียกพวกมันว่าตัวแปลว่าถึงแม้ถ้าให้พูดตามหลักการแล้วพวกมันไม่เคยเปลี่ยนแปลงค่า
หลังจากการอยู่ภายใต้expressionแล้ว ตัวแปรจะไม่เปลี่ยนโดยตลอด)
ค่าของการคืนคือ`Just t` ในตอนนี้ขึ้นอยู่กับวิธีการที่`List`ของคุณที่ถูกสร้างมา
มันจะคู่กับเงื่อนไขใดสักข้อ ถ้ามันถูกสร้างโดยการใช้`Cons`
argumentทั้งสองที่ถูกนำมา ก็จะถูกดึงออกมา (และตัวแรกจะถูกทิ้ง)

ในtypeแบบsumที่มีความซับซ้อนจะถูกเขียนในC++โดยการใช้ลำดับชั้นของclass
polymorphic
ชุดของclassต่างๆที่มีบรรพบุรุษร่วมอาจจะถูกเข้าใจในฐานะtypeที่หลากหลาย
โดยที่มี`vtable`ทำตัวเหมือนตัวระบุที่ถูกซ่อน
สิ่งที่ในHaskellสามารถทำได้โดยจับคู่รูปแบบบนconstructorและการเรียกโค้ดเฉพาะทางในC++นั้นมาคู่กับการทำปล่อยการเรียกไปยังfunctionแบบvirtualที่ขึ้นอยู่กับpointerแบบ`vtable`

เราจะเห็นไม่ค่อยบ่อยที่`union`จะถูกใช้ในฐานะtypeแบบsumในC++เพราะมีข้อจำกัดในสิ่งที่สามารถเข้าไปยังunionได้ที่มากไป
คุณไม่สามารถที่จะนำ`std::string`เข้าไปในunionเพราะว่ามันมีconstructorในการทำสำเนา
(copy constructor)

## AlgebraของTypes

ในการแยกทั้งสองtypeแบบproductและsumสามารถถูกใช้ในการนิยามdata
structureหลากหลายที่มีประโยชน์ แต่จุดแข็งที่แท้จริงมาจากการนำทั้งสองมารวมกัน
ในอีกครั้งเรากำลังจะนำพลังของการประกอบมาใช้

เราจะสรุปสิ่งที่เราได้ค้นพบจนถึงตอนนี้ เราได้เห็นโครงสร้าง monoidalที่สลับที่ได้
ที่ทั้งสองเป็นพื้นฐานของระบบtype เรามีtypeแบบsumกับ`Void`ในฐานะสมาชิกnatural
และtypeแบบproductที่มีunit type`()`ในฐานะสมาชิกnatural
เราต้องการที่จะคิดถึงทั้งสองในฐานะคล้ายกับการบวกและคูณ
ในการเปรียบเทียบนี้`Void`อาจจะคู่กับเลขศูนย์และunit`()`ไปยังอีกเลขหนึ่ง

เราจะมาดูว่าเราจะนำเปรียบเทียบนี้ไปได้ใกลที่สุดได้อย่างไร
ตัวอย่างเช่นการคูณโดยเลขศูนย์ก็จะได้เลขศูนย์หรือไม่ ในอีกความหมายหนึ่ง
typeแบบproductที่มีส่วนประกอบตัวหนึ่งเป็น`Void`นั้นisomorphicกับ`Void`หรือเปล่า
ตัวอย่างเช่นมันเป็นไปได้หรือเปล่าที่จะสร้างpairของ`Int`และ`Void` 

ในการสร้างpair คุณจะต้องมีค่าสองค่า
ถึงแม้คุณสามารถที่จะคิดถึงจำนวนเต็มอย่างไรก็ได้ แต่ไม่มีค่าที่อยู่ในtype`Void`
ดังนั้นสำหรับtype`a`ใดๆก็ได้ typeแบบ`(a,
Void)`นั้นไม่มีอะไรค่าอยู่และดังนั้นจึงเท่ากับ`Void`ในอีกความหมายหนึ่ง$a\times0=0$

ในอีกสิ่งหนึ่งที่โยงการบวกและคูณคือคุณสมบัติการแจกแจงอย่าง

$$
a\times(b+c) = a\times b+a\times c
$$

แล้วสิ่งนี้จะสามารถที่จะเป็นไปได้ในtypeแบบsumและproductหรือเปล่า
ใช่มันเป็นไปได้จนถึงความisomorphismเหมือนทุกๆครั้ง
ในด้านช้ายนั้นคู่กับtypeดังนี้

```Haskell
(a, Either b c)
```

และในด้านขวานี้นคู่กับtypeดังนี้

```Haskell
Either (a, b) (a, c)
```

นี่คือfunctionที่เปลี่ยนไปในทางหนึ่ง

```Haskell
prodToSum :: (a, Either b c) -> Either (a, b) (a, c)
prodToSum (x, e) =
    case e of
      Left  y -> Left  (x, y)
      Right z -> Right (x, z)
```

และนี่คือfunctionอีกตัวหนึ่งที่เปลี่ยนไปในทางหนึ่ง

```Haskell
sumToProd :: Either (a, b) (a, c) -> (a, Either b c)
sumToProd e =
    case e of
      Left  (x, y) -> (x, Left  y)
      Right (x, z) -> (x, Right z)
```

statement`case of`ถูกใช้สำหรับการจับคู่รูปแบบข้างในfunction
รูปแบบแต่ละรูปแบบก็ถูกตามด้วยลูกศรและexpressionในการประเมินค่าในตอนที่รูปแบบถูกจับคู่
ตัวอย่างเข่นถ้าคุณเรียก`prodToSum`กับค่าๆนี้

```Haskell
prod1 :: (Int, Either String Float)
prod1 = (2, Left "Hi!")
```

`e`ใน`case e`นั้นจะเท่ากับ`Left "Hi!"` เราจะจับคู่รูปแบบ`Left y`โดยการแทนที่
`Hi!`โดย`y` เนื่องด้วย`x`ได้ถูกจับคู่ไปยัง`2`แล้ว ผลของส่วน`case
of`และfunctionทั้งหมดก็จะเป็น`Left (2, "Hi!")`ในแบบที่คาดไว้ 

ผมจะไม่พิสูจน์ว่าทั้งสองfunctionนั้นเป็นinverseของกันและกันถ้าคุณคิดเกี่ยวกับมัน
มันจำเป็นต้องเป็น มันก็คือแค่การบรรจุใหม่อย่างตรงไปตรงมาของเนื้อหาในdata
structureทั้งสอง มันคือข้อมูลเดียวกันแค่มีรูปแบบที่ต่างกัน

นักคณิตศาสตร์มีชื่อให้กับmonoidที่มีความสัมพันธ์กันนี้ มันถูกเรียกว่า*semiring*
มันไม่ใช่*ring*เพราะว่าเราไม่สามารถนิยามการลบกันของtype
นั้นก็คือเหตุผลว่าทำไมsemiringจึงในบางครั้งถูกเรียกว่า*rig* ซึ่งเป็นการเล่นคำว่า
"ringที่ไม่มีตัวn" (ด้านลบ, negative)
แต่ยกเว้นสิ่งนี้เราสามารถที่จะได้ประสบการมากมายจากการแปลงstatementที่เกี่ยวกับจำนวนธรรมชาติที่เป็นrigไปยังstatementที่เกี่ยวกับtype
นี่คือตารางในการแปลที่มีสิ่งต่างๆที่เราให้ความสนใจ

| Numbers     | Types                             |
|-------------|-----------------------------------|
| $0$         | `Void`                            |
| $1$         | `()`                              |
| $a+b$       | `Either a b = Left a | Right b`   |
| $a\times b$ | `(a, b)` or `Pair a b = Pair a b` |
| $2=1+1$     | `data Bool = True | False`        |
| $1+a$       | `data Maybe = Nothing | Just a`   |

typeแบบlistนั้นมีความน่าสนใจเป็นอย่างมากเพราะว่ามันถูกนิยามในฐานะคำตอบของสมการ
typeที่เรากำลังนิยามโผล่ขึ้นมาในทั้งสองด้านของสมการ 

```Haskell
data List a = Nil | Cons a (List a)
```

ถ้าเราทำการแทนที่สมการแบบทั่วไปและทำการแทน`List
a`ด้วย`x`เราก็จะมีสมการนี้เราก็จะมีสมการแบบนี้

```
x = 1 + a*x
```

เราไม่สามารถที่จะหาค่าได้ในวิธีการทางพีชคณิตแบบดั่งเดิมเพราะว่าเราไม่สามารถลบหรือหารtypeต่างๆได้
แต่เราสามารถลองที่จะแทนที่ไปได้เรื่อยๆที่ที่เราแทน`x`ในด้านขวาด้วย`(1+a*x)`
โดนการใช้คุณสมบัติการแจกแจงก็จะกลายมาเป็นค่าต่างๆในแบบนี้

```
x=1+a*x
x = 1 + a*(1 + a*x) = 1 + a + a*a*x
x = 1 + a + a*a*(1 + a*x) = 1 + a + a*a + a*a*a*x
...
x = 1 + a + a*a + a*a*a + a*a*a*a...
```

เราก็จะจบลงที่sumของproduct(ที่เป็นtuple)ที่สามารถถูกนิยามในแบบที่ว่า
listนั้นว่างหรือมีสมาชิกเดี่ยว`a`หรือเป็นpair`a*a`หรือtriple`a*a*a`ไปเรื่อยๆ
นั้นก็คือสิ่งที่listเป็น เป็นstringของ`a`ต่างๆ

แต่listก็มีอะไรมากกว่านั้นและเราจะกลับมายังdata
structureแบบrecursiveหลังจากที่เราเรียนเกี่ยวกับfunctorและfixed point

การแก้สมการด้วยตัวแปรที่เป็นเครื่องหมาย ที่ก็คือalgebra
มันคือสิ่งที่ให้typeมีชื่อว่าtypeข้อมูลแบบalgebraic

สุดท้ายแล้วเราควรที่จะพูดถึงการตีความที่สำคัญเป็นอย่างมากของalgebraของtypeต่างๆ
สังเกตว่าproductของสองtype`a`และ`b`นั้นต้องมีค่าของtype`a`*และ*ค่าของtype`b`
นั่นหมายความว่าtypeทั้งสองต้องอยู่ในtypeแบบproductนั้น
sumระหว่างtypeทั้งสองในอีกทางหนึ่งประกอบด้วย ค่าของtype`a`*หรือ*ค่าของtype`b`
ดังนั้นมันเพียงพอที่จะให้อย่างใดอย่างหนึ่งอยู่ในtypeแบบsumนั้น
*และ*และ*หรือ*ในทางตรรกศาสตร์(Logic)ก็เป็น*semiring*และมันสามารถที่จะถูกโยงไปสู่ทฤษฎีtypeว่า

| Logic     | Types                            |
|-----------|----------------------------------|
| *false*   | `Void`                           |
| *true*    | `()`                             |
| $a\|b$    | `Either a b = Left a \| Right b` |
| $a\&\& b$ | `(a, b)`                         |

การเปรียบเทียบนี้นั้นลงลึกไปได้กว่านี้
นี่คือพื้นฐานของisomorphismของCurry-Howardระหว่างlogicและทฤษฎีtype
เราจะกลับมาในตอนที่เราพูดเกี่ยวกับtypeแบบfunction

## โจทย์ท้าทาย

1. ลองแสดงดูว่ามันมีisomorphismระหว่าง`Maybe a`และ`Either () a`

2. นี่คือtypeแบบsumที่ถูกนิยามในHaskell
```Haskell
data Shape = Circle Float 
           | Rect Float Float
```
ในที่นี้เราต้องการที่จะนิยามfunctionอย่าง`area`ที่กระทำบน`Shape` เราทำโดยการใช้การจับคู่รูปแบบต่อconstructorทั้งสอง
```Haskell
area :: Shape -> Float
area (Circle r) = pi * r * r
area (Rect d h) = d * h
```
ลองเขียน`Shape`ในC++หรือJavaดูในฐานะinterfaceและสร้างclassสองclassอย่าง`Circle`และ`Rect` และเขียน`area`ในรูปของfunctionแบบvirtual

3. ติดตามมาจากข้อสอง เราสามารถที่จะเพิ่มfunctionใหม่อย่าง`circ`ที่คำนวณเส้นรอบวงของ`Shape`เราสามารถที่จะทำมันได้โดยที่ไม่ต้องแตะนิยามของ`Shape`
```Haskell
circ :: Shape -> Float
circ (Circle r) = 2.0 * pi * r
circ (Rect d h) = 2.0 * (d + h)
```
ลองเพิ่ม`circ`ไปยังโค้ดของC++หรือJavaแล้วมีส่วนไหนของโค้ดดั้งเดิมที่เราต้องแตะ

4. ติดตามมาจากข้อสาม ลองเพิ่ม`Sqaure`ที่เป็นรูปร่างใหม่เข้ามาใน`Shape`และทำการแก้จุดต่างๆที่จำเป็น มีส่วนไหนที่คุณต้องแตะในHaskellเมื่อเทียบกับC++หรือJava(ถึงแม้คุณจะไม่เป็นคนที่เขียนHaskellการแก้ไขนั้นค่อนข้างตรงไปตรงมา)

5. ลองดูว่า$a+a=2\times a$นั้นจริงในtypeต่างๆ(จนถึงความisomorphism) จำไว้ว่า$2$นั้นคู่กับ`Bool`โดยตามมาจากตารางการแปลของเรา

